#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\begin_preamble
\usepackage{listings,xcolor,courier,bookmark}
\usepackage{listingsutf8}
\usepackage{lmodern}
\definecolor{darkblue}{named}{blue}
\definecolor{darkred}{named}{red}
\definecolor{grau}{named}{gray}
\let\Righttorque\relax
\lstset{
captionpos=b,
commentstyle=\color[rgb]{0.133,0.545,0.133},
keywordstyle=\color{darkblue},
stringstyle=\color{darkred},
extendedchars=true,
basicstyle=\small\ttfamily,
showstringspaces=false,
tabsize=2,
numbers=left,
numberstyle=\tiny,
breakautoindent  = true,
breakindent      = 2em,
breaklines       = true,
postbreak        = ,
prebreak         = \raisebox{-.8ex}[0ex][0ex]{\Righttorque},
showspaces=false, 
showtabs=false, 
showstringspaces=false,
language=VHDL,
frame=single,
morecomment=[s]{--}
}


\renewcommand*{\lstlistingname}{Codice Componente}


\usepackage{fancyhdr}
\pagestyle{fancy}

\fancyhead{} 
\fancyfoot{} 

\fancyhead[RO,LE]{\bfseries \leftmark}
\fancyfoot[LE,RO]{\thepage}
\fancyfoot[LO,CE]{Tesina in ASE: Architetture dei Sistemi di Elaborazione}
\renewcommand{\headrulewidth}{0.4pt}
\renewcommand{\footrulewidth}{0.4pt}

\date{}
\cfoot{}
\end_preamble
\use_default_options true
\master Tesina.lyx
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2.5cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Introduzione
\end_layout

\begin_layout Standard
In seguito alle numerose analisi effettuate, si è concluso che l'architettura
 meglio si adattava al sistema in esame fosse un'architettura a microservizi.
 Infatti, la separazione dei componenti crea un ambiente più efficace per
 il build e il mantenimento della scalabilità; inoltre i servizi si sviluppano
 e distribuiscono in modo indipendente, risultando più facili da mantenere,
 correggere e aggiornare, e portando a funzionalità più agili per rispondere
 ai cambiamenti ambientali, caratteristica fondamentale per un'applicazione
 sviluppata ex-novo.
\end_layout

\begin_layout Standard
Tuttavia in seguito ad una scrupolosa analisi di fattibilità, si è constatato
 che sarebbe stato impossibile applicare tale modello al caso in esame poiché
 non si sarebbero potutiti rispettare i tempi di consegna a causa della
 complessità di sviluppo conseguente all'adozione di tale architettura.
\end_layout

\begin_layout Standard
Si è quindi optato per una soluzione più semplice, ovvero un'
\series bold
architettura multi-tier
\series default
, in cui però si è tenuto conto di un futuro passaggio ad un'architettura
 a microservizi, infatti, i vari componenti sono accessibili tramite un'
\series bold
interfaccia REST
\series default
.
\end_layout

\begin_layout Standard
D'altra parte il nostro software farà ricorso a due 
\series bold
servizi esterni
\series default
, quali Janus e PayPal (nella release successiva), per implementare le funzional
ità di videochiamata e pagamento.
\end_layout

\begin_layout Section
Design
\end_layout

\begin_layout Standard
Per illustrare l'architettura del sistema, si è fatto ricorso ai seguenti
 diagrammi:
\end_layout

\begin_layout Itemize
Package Diagrams;
\end_layout

\begin_layout Itemize
Context Diagram with Boundary;
\end_layout

\begin_layout Itemize
Component Diagram;
\end_layout

\begin_layout Itemize
Deployment Diagram.
\end_layout

\begin_layout Standard
Si sono inoltre sviluppati un insieme di Sequence Diagrams al fine di mostrare
 il funzionamento e la comunicazione dei vari moduli del sistema.
\end_layout

\begin_layout Subsection
Package Diagrams
\end_layout

\begin_layout Standard
I Package Diagrams sono utilizzati per modellare la struttura modulare del
 sistema, d'altra parte essi evidenziano i differenti strati dell'architettura
 che si rifletteranno nel codice sorgente.
\end_layout

\begin_layout Standard
Nel caso in esame sono stati elaborati due differenti diagrammi:
\end_layout

\begin_layout Itemize
Un Package Diagram generale, il quale mostra la struttura generale del sistema;
\end_layout

\begin_layout Itemize
Un Package Diagram specifico, il quale entra nel dettaglio dei vari moduli
 del sistema.
\end_layout

\begin_layout Standard
Tale distinzione è stata fatta per fornire una versone più 
\begin_inset Quotes eld
\end_inset

leggibile
\begin_inset Quotes erd
\end_inset

 dell'architettura ed una più dettagliata.
\end_layout

\begin_layout Subsubsection*
Package Diagram generale
\end_layout

\begin_layout Standard
Come è possibile evincere dalla figura sosttostante, l'applicazione è strutturat
a secondo un'
\series bold
architettura three-tier 
\series default
(a tre strati), soluzione ampiamente utilizzata per le applicazioni web.
 Essa prevede la suddivisione dell'applicazione in tre diversi moduli:
\end_layout

\begin_layout Itemize
Il 
\series bold
Web Layer
\series default
 dedicato all'interfaccia utente,
\end_layout

\begin_layout Itemize
Il 
\series bold
Service Layer
\series default
 dedicato alla logica funzionale,
\end_layout

\begin_layout Itemize
Il 
\series bold
Data Layer
\series default
 dedicato alla gestione dei dati persistenti.
\end_layout

\begin_layout Standard
Nell’architettura a tre livelli, ciascuna delle funzionalità principali
 è isolata dalle altre, in modo che il Web Layer sia indipendente dal Service
 Layer, che a è sua volta sono separato dai dati (Data Layer).
 Questo modello richiede un maggior impegno in termini di analisi e di progettaz
ione preliminari, ma consente di ridurre in misura significativa i costi
 di manutenzione e nel lungo tempo aumenta la flessibilità funzionale.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Package Diagram (generale).jpg
	lyxscale 80
	scale 80

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Package Diagram generale
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Package Diagram specifico
\end_layout

\begin_layout Standard
Tale diagrama specifica puntalmente la struttura ed i contenuti dei vari
 package del sistema, tuttavia risulta poco leggibile a causa delle dimensioni
 dello stesso.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Package Diagram (specifico).jpg
	lyxscale 10
	scale 10

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Package Diagram specifico
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Component Diagram
\end_layout

\begin_layout Standard
Il Component Diagram è un diagramma che ha lo scopo di rappresentare la
 struttura interna del sistema software modellato in termini dei suoi componenti
 principali e delle relazioni fra di essi.
 Per componente si intende una unità software dotata di una precisa identità,
 nonché responsabilità e interfacce ben definite.
\end_layout

\begin_layout Standard
Com'è possibile evincere dalla figura sottostante, è possibile scomporre
 il sistema nei seguenti componenti:
\end_layout

\begin_layout Itemize
Una Web Application: Smart Learning;
\end_layout

\begin_layout Itemize
Tre User Interface (una per ogni attore primario del sistema): Utente, Studente
 e Docente;
\end_layout

\begin_layout Itemize
Tre Service (che corrispondono ai servizi esterni adoperati dal sistema):
 Janus, PayPal e un Webmail Server;
\end_layout

\begin_layout Itemize
Un Database (necessario per gestire la pesistenza dei dati): MySQL.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Component Diagram.jpg
	lyxscale 80
	scale 20

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Component Diagram
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Deployment Diagram
\end_layout

\begin_layout Standard
Il Deployment Diagram è utilizzato per descrivere un sistema in termini
 di risorse hardware, dette nodi, e di relazioni fra di esse.
 Se unito al Component Diagram, mostra come le componenti software siano
 distribuite rispetto alle risorse hardware disponibili sul sistema.
\end_layout

\begin_layout Standard
Come è possibile evincere dalla figura sottostante, il sistema è 
\begin_inset Quotes eld
\end_inset

deployato
\begin_inset Quotes erd
\end_inset

 nella seguente modalità:
\end_layout

\begin_layout Itemize

\series bold
Nodo 1
\series default
: Azure Cloud contenente il server Apache Tomcat, sul quale viene eseguito
 
\begin_inset Quotes eld
\end_inset

Smart Learning
\begin_inset Quotes erd
\end_inset

;
\end_layout

\begin_layout Itemize

\series bold
Nodo 2
\series default
: Azure Cloud contenente il database MySQL;
\end_layout

\begin_layout Itemize

\series bold
Nodo 3
\series default
: Azure Cloud contenete il server Janus.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/Deployment Diagram.jpg
	lyxscale 50

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Deployment Diagram
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Architettura
\end_layout

\begin_layout Standard
Come precedentemente illustrato, l'applicazione è strutturata secondo un'
\series bold
architettura three-tier
\series default
.
\end_layout

\begin_layout Standard
Il Client non comunica direttamente con il server del database, ma con un
 server dell'applicazione.
 In questo modo il Client svolge solo il compito di interfaccia utente (
\series bold
Thin Client
\series default
) e la logica dell'applicazione è inserita nel server applicativo.
\end_layout

\begin_layout Standard
Server applicativo e server di database possono risiedere nella stessa macchina
 o su macchine diverse collegate in rete: nel nostro caso esse risiedono
 entrambi su 
\series bold
Azure Cloud
\series default
, ma su due locazioni differenti.
\end_layout

\begin_layout Standard
Il Client è un semplice browser web, mentre il server applicativo è un server
 web: nel nostro caso è stato utilizzato 
\series bold
Apache Tomcat 9.0
\series default
.
\end_layout

\begin_layout Standard
Per quanto riguarda il server del database, invece, è stato adoperato 
\series bold
MySQL 8.0
\series default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/Architettura.jpg

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Architettura Software
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Web Layer
\end_layout

\begin_layout Standard
Tale livello gestisce la comunicazione con il Client.
 Il Web Layer è costituito da un serie di 
\series bold
Web Content
\series default
 (Documenti HTML, CSS e JavaScript) e dai moduli che sono utilizzati per
 la generazione di pagine web dinamiche, a seconda dei parametri di richiesta
 inviati dal client browser dell'utente al server (
\series bold
servlet
\series default
).
\end_layout

\begin_layout Standard
Le richieste effettuate dal Client sono in formato HTTP
\end_layout

\begin_layout Subsubsection*
Servlet
\end_layout

\begin_layout Standard
Una servlet è un programma scritto in Java e residente sul server applicativo,
 in grado di gestire le richieste generate da uno o più client, attraverso
 uno scambio di messaggi tra il server ed i client stessi che hanno effettuato
 la richiesta.
\end_layout

\begin_layout Standard
Il flusso di dati è incentrato su due componenti fondamentali: la richiesta
 (
\shape italic
request
\shape default
, inviata dal client verso il server) e la risposta (
\shape italic
response
\shape default
, inviata dal server verso il client).
 In Java, questi due componenti sono identificati, rispettivamente, dalle
 seguenti interfacce:
\end_layout

\begin_layout Itemize

\family typewriter
javax.servlet.http.HttpServletRequest
\end_layout

\begin_layout Itemize

\family typewriter
javax.servlet.http.HttpServletResponse
\end_layout

\begin_layout Standard
Un oggetto di tipo 
\family typewriter
HttpServletRequest
\family default
 consente ad una Servlet di ricavare svariate informazioni sul sistema e
 sull’ambiente relativo al client.
 L’oggetto di tipo 
\family typewriter
HttpServletResponse
\family default
, invece, costituisce la risposta da inviare al client.
 Creare una Servlet vuol dire, in termini pratici, definire una classe che
 derivi dalla classe 
\family typewriter
HttpServlet
\family default
.
 I metodi per i quali si è effettuato un overriding nella classe derivata
 sono:
\end_layout

\begin_layout Itemize

\family typewriter
void doGet(HttpServletRequest req, HttpServletResponse resp)
\family default
 Gestisce le richieste HTTP di tipo GET.
\end_layout

\begin_layout Itemize

\family typewriter
void doPost(HttpServletRequest req, HttpServletResponse resp)
\family default
 Gestisce le richieste HTTP di tipo POST.
\end_layout

\begin_layout Standard
Le interfacce esposte sono state realizzate adottando lo stile architetturale
 
\series bold
REST
\series default
.
\end_layout

\begin_layout Standard
L'architettura REST si basa su HTTP.
 Il funzionamento prevede una struttura degli URL ben definita che identifica
 univocamente una risorsa o un insieme di risorse e l'utilizzo dei metodi
 HTTP specifici per il recupero di informazioni (GET), per la modifica (POST,
 PUT, PATCH, DELETE) e per altri scopi (OPTIONS, ecc.).
 
\end_layout

\begin_layout Section
Data Layer
\end_layout

\begin_layout Standard
Il layer DAO (Data access objects) è uno strato demandato completamente
 a gestire la comunicazione fra l'applicazione ed il DBMS relazionale.
\end_layout

\begin_layout Standard
Il Data Layer offre un'interfaccia (API) per disaccoppiare l'applicazione,
 quindi la logica di business, dall'implementazione dell'interfacciamento
 con la base di dati persistente.
\end_layout

\begin_layout Standard
Ciò garantisce all'architettura di essere flessibile ad eventuali cambiamenti
 che riguardano la base di dati persistente.
\end_layout

\begin_layout Standard
Inoltre l'API del Data layer è stata progettata in modo opportuno cercando
 di renderla quanto più flessibile e riutilizzabile tenendo a mente una
 possibile estensione ad architettura a microservizi.
\end_layout

\begin_layout Standard
A tal proposito si è scelto di strutturare il data layer in moduli indipendenti
 che rispecchiassero i possibili moduli DAO di un'architettura a microservizi.
 
\end_layout

\begin_layout Standard
Questi moduli nell' architettura attuale hanno in comune la dipendenza dal
 modulo DBDataConnector per l'interfacciamento con il DBMS.
\end_layout

\begin_layout Subsection
Moduli del Data Layer ed API
\end_layout

\begin_layout Standard
Vorrei far vedere un esempio di interfaccia (ad esempio di lezione o di
 utente) e poi far vedere il package che contiene tutti i package.
\end_layout

\end_body
\end_document
