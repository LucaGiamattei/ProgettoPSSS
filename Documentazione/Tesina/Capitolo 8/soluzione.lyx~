#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\begin_preamble
\usepackage{listings,xcolor,courier,bookmark}
\usepackage{listingsutf8}
\usepackage{lmodern}
\definecolor{darkblue}{named}{blue}
\definecolor{darkred}{named}{red}
\definecolor{grau}{named}{gray}
\let\Righttorque\relax
\lstset{
captionpos=b,
commentstyle=\color[rgb]{0.133,0.545,0.133},
keywordstyle=\color{darkblue},
stringstyle=\color{darkred},
extendedchars=true,
basicstyle=\small\ttfamily,
showstringspaces=false,
tabsize=2,
numbers=left,
numberstyle=\tiny,
breakautoindent  = true,
breakindent      = 2em,
breaklines       = true,
postbreak        = ,
prebreak         = \raisebox{-.8ex}[0ex][0ex]{\Righttorque},
showspaces=false, 
showtabs=false, 
showstringspaces=false,
language=VHDL,
frame=single,
morecomment=[s]{--}
}


\renewcommand*{\lstlistingname}{Codice Componente}


\usepackage{fancyhdr}
\pagestyle{fancy}

\fancyhead{} 
\fancyfoot{} 

\fancyhead[RO,LE]{\bfseries \leftmark}
\fancyfoot[LE,RO]{\thepage}
\fancyfoot[LO,CE]{Tesina in ASE: Architetture dei Sistemi di Elaborazione}
\renewcommand{\headrulewidth}{0.4pt}
\renewcommand{\footrulewidth}{0.4pt}

\date{}
\cfoot{}
\end_preamble
\use_default_options true
\master Tesina.lyx
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2.5cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Data Layer
\end_layout

\begin_layout Standard
Le API del data layer sono state testate tramite JUnit5.
 E' stato generato un test case per ogni API presente nel livello; i casi
 di test hanno solo testato il funzionamento delle funzioni in modo grossolano.
 Prima di progettare in modo più dettagliato i casi di test, sarebbe opportuno
 aumentare la robustezza del software ad esempio implementando un'attenta
 validazione dei parametri di ingresso delle funzioni.
\end_layout

\begin_layout Standard
Nella seguente figura è mostrato un esempio del caso di test implementato
 con JUnit5 per l'API di Utente.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/testUnitUtente.png
	lyxscale 40
	scale 20

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Esempio di TestCase JUnit 5
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
REST API
\end_layout

\begin_layout Standard
Il paradigma architetturale REST è basato sul protocollo HTTP.
 Anche in questo caso non è stato progettato un vero e propio suite di casi
 di test per testare ogni risorsa REST, piuttosto, su Swagger, le API sono
 state documentate secondo lo standard OpenAPI3.0 ottenendo come risultato
 un ambiente di test, nel quale, come è possibile vedere dall'immagine seguente,
 ogni URI puà essere testata facilemente modificando i parametri di ingresso
 alla funzione.
 Inoltre ad ogni metodo di ogni URI è stato documentato uno schema per la
 risposta con il quale è possibile sia progettare i test, ma anche validare
 la risposta.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/RESTAP1.png
	lyxscale 40
	scale 30

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Esempio di Interfaccia Swagger per testare il metodo POST dell'URI 
\begin_inset Quotes eld
\end_inset

ProgrammazioneDocente
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/OPENAPI2.png
	lyxscale 50
	scale 30

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Schema di risposta alla richiesta POST dell'URI 
\begin_inset Quotes eld
\end_inset

ProgrammazioneDocente
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
